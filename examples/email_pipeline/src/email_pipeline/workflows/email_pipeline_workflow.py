# @generated by restack-gen
"""
EmailPipelineWorkflow workflow.

Auto-generated pipeline demonstrating parallel and conditional operators.
"""

import asyncio
from restack_ai import Workflow, step

from email_pipeline.agents.email_validator import email_validator_activity
from email_pipeline.agents.spam_checker import spam_checker_activity
from email_pipeline.agents.virus_scanner import virus_scanner_activity
from email_pipeline.agents.email_router import email_router_activity
from email_pipeline.agents.personal_handler import personal_handler_activity
from email_pipeline.agents.business_handler import business_handler_activity


class EmailPipelineWorkflow(Workflow):
    """EmailPipelineWorkflow orchestrates email processing with parallel and conditional logic."""

    @step
    async def execute(self, input_data: dict) -> dict:
        """Execute pipeline workflow."""
        result = input_data

        # Step 1: Validate email
        result = await self.execute_activity(email_validator_activity, result)

        # Step 2: Parallel security checks (SpamChecker â‡„ VirusScanner)
        spam_result, virus_result = await asyncio.gather(
            self.execute_activity(spam_checker_activity, result),
            self.execute_activity(virus_scanner_activity, result),
        )
        # Merge parallel results
        result = {**spam_result, **virus_result}

        # Step 3: Route email
        result = await self.execute_activity(email_router_activity, result)

        # Step 4: Conditional handling based on email type
        email_type = result.get("routing", {}).get("email_type", "personal")
        if email_type == "personal":
            result = await self.execute_activity(personal_handler_activity, result)
        else:
            result = await self.execute_activity(business_handler_activity, result)

        return result
