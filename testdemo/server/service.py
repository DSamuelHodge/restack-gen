# @generated by restack-gen v1.0.0 (2025-10-26T04:27:12.245760+00:00)
# command: restack new testdemo
"""testdemo Restack service."""

import asyncio
import logging
from pathlib import Path
from restack_ai import Restack

from testdemo.common.settings import settings

# FastMCP Tool Servers (optional)
try:
    from testdemo.common.fastmcp_manager import start_tool_servers, stop_tool_servers
    FASTMCP_AVAILABLE = Path("config/tools.yaml").exists()
except ImportError:
    FASTMCP_AVAILABLE = False

logger = logging.getLogger(__name__)


async def main() -> None:
    """Start Restack service with all registered resources."""
    # Start FastMCP tool servers if configured
    if FASTMCP_AVAILABLE:
        logger.info("Starting FastMCP tool servers...")
        try:
            await start_tool_servers()
            logger.info("FastMCP tool servers started successfully")
        except Exception as e:
            logger.error(f"Failed to start tool servers: {e}")
            logger.warning("Continuing without tool servers")
    
    client = Restack()

    try:
        # Register all workflows and functions
        await client.start_service(
            workflows=[            ],
            functions=[            ],
            task_queue="testdemo",
        )
    finally:
        # Stop tool servers on shutdown
        if FASTMCP_AVAILABLE:
            logger.info("Stopping FastMCP tool servers...")
            try:
                await stop_tool_servers()
                logger.info("FastMCP tool servers stopped")
            except Exception as e:
                logger.error(f"Failed to stop tool servers: {e}")


if __name__ == "__main__":
    asyncio.run(main())
