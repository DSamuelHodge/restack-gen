# @generated by restack_gen v{{ generator_version }} ({{ timestamp }})
# command: {{ command }}
"""Tests for {{ workflow_name }} workflow."""

import pytest
from restack_ai.testing import WorkflowEnvironment

from {{ project_name }}.workflows.{{ workflow_module }} import {{ workflow_name }}{% if has_input %}, {{ workflow_name }}Input{% endif %}{% if has_output %}, {{ workflow_name }}Output{% endif %}


@pytest.mark.asyncio
async def test_{{ workflow_test_name }}_success():
    """Test {{ workflow_name }} executes successfully."""
    {% if has_input -%}
    input_data = {{ workflow_name }}Input(
        # TODO: Set test input
    )
    {% else -%}
    input_data = None
    {%- endif %}

    async with WorkflowEnvironment() as env:
        # Register workflow
        env.register_workflow({{ workflow_name }})

        # TODO: Register any activities/child workflows used

        # Execute workflow
        result = await env.run({{ workflow_name }}, input_data)

        # Verify result
        {% if has_output -%}
        assert isinstance(result, {{ workflow_name }}Output)
        # TODO: Add specific assertions
        {%- else -%}
        assert result is None
        {%- endif %}


@pytest.mark.asyncio
async def test_{{ workflow_test_name }}_invalid_input():
    """Test {{ workflow_name }} handles invalid input."""
    {% if has_input -%}
    input_data = {{ workflow_name }}Input(
        # TODO: Set invalid test input
    )
    {% else -%}
    pytest.skip("No input validation for this workflow")
    {%- endif %}

    async with WorkflowEnvironment() as env:
        env.register_workflow({{ workflow_name }})

        # TODO: Verify error handling
        # with pytest.raises(SomeError):
        #     await env.run({{ workflow_name }}, input_data)


@pytest.mark.asyncio
@pytest.mark.integration
async def test_{{ workflow_test_name }}_integration():
    """Integration test for {{ workflow_name }} with real activities."""
    {% if has_input -%}
    input_data = {{ workflow_name }}Input(
        # TODO: Set test input
    )
    {% else -%}
    input_data = None
    {%- endif %}

    async with WorkflowEnvironment() as env:
        env.register_workflow({{ workflow_name }})

        # TODO: Register real activities/child workflows

        result = await env.run({{ workflow_name }}, input_data)

        # TODO: Verify integration result
