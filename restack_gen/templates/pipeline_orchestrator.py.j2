# @generated by restack-gen v{{ generator_version }} ({{ timestamp }})
# command: {{ command }}
"""{{ name }} pipeline orchestrator implementation."""

from datetime import timedelta

from restack_ai.workflow import workflow, log

from {{ project_name }}.common.compat import BaseModel
from {{ project_name }}.common.retries import DEFAULT_RETRY
from {{ project_name }}.common.settings import settings


class {{ pipeline_name }}Token(BaseModel):
    """Token passed between pipeline steps."""
{% for field in token_fields %}
    {{ field.name }}: {{ field.type }}{% if field.optional %} | None = None{% endif %}  # {{ field.description }}
{%- endfor %}


@workflow.defn(name="{{ pipeline_name }}")
class {{ pipeline_name }}:
    """
    {{ description }}

    Pipeline structure:
    {{ pipeline_diagram }}
    """

    @workflow.run
    async def run(self, input: {{ pipeline_name }}Token) -> {{ pipeline_name }}Token:
        """
        Execute {{ pipeline_name }} pipeline.

        Args:
            input: Initial pipeline token

        Returns:
            Final pipeline token after all steps
        """
        log.info("{{ pipeline_name }} started", extra={"input": input})
        token = input
{% for step in steps %}
{% if step.type == "sequential" %}

        # Step: {{ step.name }}
        token = await self._step_{{ step.function_name }}(token)
{% elif step.type == "loop" %}

        # Loop: {{ step.name }}
        token = await self._loop_{{ step.function_name }}(token)
{% elif step.type == "conditional" %}

        # Conditional: {{ step.name }}
        if await self._should_execute_{{ step.function_name }}(token):
            token = await self._step_{{ step.function_name }}(token)
{% endif %}
{%- endfor %}

        log.info("{{ pipeline_name }} completed", extra={"output": token})
        return token
{% for step in steps %}
{% if step.type == "sequential" %}

    async def _step_{{ step.function_name }}(self, token: {{ pipeline_name }}Token) -> {{ pipeline_name }}Token:
        """Execute {{ step.name }} step."""
        log.info("Executing step: {{ step.name }}")

        # TODO: Call workflow for {{ step.name }}
        # result = await workflow.execute_child_workflow(
        #     {{ step.workflow_class }},
        #     {{ step.workflow_class }}Input(...),
        #     workflow_id=f"{workflow.info().workflow_id}-{{ step.function_name }}",
        #     task_queue="{{ task_queue }}",
        #     retry_policy=DEFAULT_RETRY,
        # )

        # Update token with results
        # token.{{ step.output_field }} = result.output_field
        return token
{% elif step.type == "loop" %}

    async def _loop_{{ step.function_name }}(self, token: {{ pipeline_name }}Token) -> {{ pipeline_name }}Token:
        """Execute {{ step.name }} loop."""
        log.info("Starting loop: {{ step.name }}")

        max_iterations = settings.pipeline.loops.{{ step.loop_key }}.max
        iteration = 0

        while iteration < max_iterations and await self._should_continue_{{ step.function_name }}(token):
            log.info(
                "Loop iteration",
                extra={"loop": "{{ step.name }}", "iteration": iteration},
            )

            # Execute {{ step.node_a }} â†’ {{ step.node_b }}
            token = await self._step_{{ step.node_a_function }}(token)
            token = await self._step_{{ step.node_b_function }}(token)

            iteration += 1

        if iteration >= max_iterations:
            log.warning(
                "Loop max iterations reached",
                extra={"loop": "{{ step.name }}", "max": max_iterations},
            )

        return token

    async def _should_continue_{{ step.function_name }}(self, token: {{ pipeline_name }}Token) -> bool:
        """Determine if {{ step.name }} loop should continue."""
        # TODO: Implement loop continuation logic
        # Example: return not token.is_approved
        return False  # Stub: will exit after first iteration
{% elif step.type == "conditional" %}

    async def _should_execute_{{ step.function_name }}(self, token: {{ pipeline_name }}Token) -> bool:
        """Determine if {{ step.name }} should execute."""
        # TODO: Implement conditional logic
        # Example: return token.needs_review
        return True  # Stub: always executes
{% endif %}
{%- endfor %}
