# @generated by restack-gen v{{ generator_version }} ({{ timestamp }})
# command: {{ command }}
"""Tests for {{ function_name }} function."""

import pytest

from {{ project_name }}.functions.{{ function_module }} import {{ function_name }}


@pytest.mark.asyncio
async def test_{{ function_test_name }}_success():
    """Test {{ function_name }} executes successfully."""
    # TODO: Set test input
    {% for param in params -%}
    {{ param.name }} = None  # TODO: Set test value
    {% endfor %}

    result = await {{ function_name }}({{ params_call }})

    # Verify result
    {% if return_type == "None" -%}
    assert result is None
    {%- else -%}
    # TODO: Add specific assertions
    assert result is not None
    {%- endif %}


@pytest.mark.asyncio
async def test_{{ function_test_name }}_invalid_input():
    """Test {{ function_name }} handles invalid input."""
    # TODO: Set invalid test input
    {% for param in params -%}
    {{ param.name }} = None  # TODO: Set invalid value
    {% endfor %}

    # TODO: Verify error handling
    # with pytest.raises(SomeError):
    #     await {{ function_name }}({{ params_call }})


@pytest.mark.asyncio
async def test_{{ function_test_name }}_edge_cases():
    """Test {{ function_name }} edge cases."""
    # TODO: Test edge cases (empty input, boundary values, etc.)
    pass
