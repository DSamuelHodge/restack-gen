# @generated by restack_gen v{{ generator_version }} ({{ timestamp }})
# command: {{ command }}
"""{{ name }} workflow implementation."""

from datetime import timedelta

from restack_ai.workflow import workflow, log
{% if has_input %}
from {{ project_name }}.common.compat import BaseModel
{% endif %}
from {{ project_name }}.common.retries import DEFAULT_RETRY
from {{ project_name }}.common.settings import settings

{% if has_input %}

class {{ workflow_name }}Input(BaseModel):
    """Input model for {{ workflow_name }} workflow."""
{% for field in input_fields %}
    {{ field.name }}: {{ field.type }}{% if field.optional %} | None = None{% endif %}  # {{ field.description }}
{%- endfor %}
{% endif %}
{% if has_output %}

class {{ workflow_name }}Output(BaseModel):
    """Output model for {{ workflow_name }} workflow."""
{% for field in output_fields %}
    {{ field.name }}: {{ field.type }}{% if field.optional %} | None = None{% endif %}  # {{ field.description }}
{%- endfor %}
{% endif %}


@workflow.defn(name="{{ workflow_name }}")
class {{ workflow_name }}:
    """
    {{ description }}
    """

    @workflow.run
    async def run(self, input: {{ input_type }}) -> {{ output_type }}:
        """
        Execute {{ workflow_name }} workflow.

        Args:
            input: {{ input_description }}

        Returns:
            {{ output_description }}
        """
        log.info("{{ workflow_name }} started", extra={"input": input})

        # TODO: Implement workflow logic
        # Example: Call activities/child workflows
        # result = await workflow.execute_activity(
        #     some_activity,
        #     input.some_field,
        #     start_to_close_timeout=timedelta(seconds=settings.default_timeout),
        #     retry_policy=DEFAULT_RETRY,
        # )

        {% if output_type == "None" -%}
        log.info("{{ workflow_name }} completed")
        {%- else -%}
        output = {{ output_type }}()  # TODO: Populate output
        log.info("{{ workflow_name }} completed", extra={"output": output})
        return output
        {%- endif %}
