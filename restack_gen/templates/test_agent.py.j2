# @generated by restack-gen v{{ generator_version }} ({{ timestamp }})
# command: {{ command }}
"""Tests for {{ agent_name }} agent."""

import pytest
from restack_ai.testing import WorkflowEnvironment

from {{ project_name }}.agents.{{ agent_module }} import {{ agent_name }}, {{ agent_name }}State, {{ event_enum_name }}


@pytest.mark.asyncio
async def test_{{ agent_test_name }}_initialization():
    """Test {{ agent_name }} initializes with correct state."""
    initial_state = {{ agent_name }}State(
        # TODO: Set test initial state
    )

    async with WorkflowEnvironment() as env:
        # TODO: Start agent and verify initialization
        pass


@pytest.mark.asyncio
async def test_{{ agent_test_name }}_handle_events():
    """Test {{ agent_name }} handles events correctly."""
    initial_state = {{ agent_name }}State(
        # TODO: Set test initial state
    )

    async with WorkflowEnvironment() as env:
        # TODO: Send events and verify handling
        pass
{% for event in events %}


@pytest.mark.asyncio
async def test_{{ agent_test_name }}_{{ event.test_name }}():
    """Test {{ agent_name }} handles {{ event.value }} event."""
    initial_state = {{ agent_name }}State(
        # TODO: Set test initial state
    )

    async with WorkflowEnvironment() as env:
        # TODO: Test {{ event.value }} event handling
        pass
{%- endfor %}


@pytest.mark.asyncio
async def test_{{ agent_test_name }}_query_state():
    """Test {{ agent_name }} state query."""
    initial_state = {{ agent_name }}State(
        # TODO: Set test initial state
    )

    async with WorkflowEnvironment() as env:
        # TODO: Query state and verify
        pass
