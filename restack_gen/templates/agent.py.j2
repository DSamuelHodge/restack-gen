# @generated by restack-gen v{{ generator_version }} ({{ timestamp }})
# command: {{ command }}
"""{{ name }} agent implementation."""

from datetime import timedelta
from enum import Enum

from restack_ai.workflow import workflow, log

from {{ project_name }}.common.compat import BaseModel
from {{ project_name }}.common.retries import DEFAULT_RETRY
from {{ project_name }}.common.settings import settings


class {{ event_enum_name }}(str, Enum):
    """Events for {{ agent_name }} agent."""
{% for event in events %}
    {{ event.constant }} = "{{ event.value }}"  # {{ event.description }}
{%- endfor %}


class {{ agent_name }}State(BaseModel):
    """State model for {{ agent_name }} agent."""
{% for field in state_fields %}
    {{ field.name }}: {{ field.type }}{% if field.optional %} | None = None{% endif %}  # {{ field.description }}
{%- endfor %}


@workflow.defn(name="{{ agent_name }}")
class {{ agent_name }}:
    """
    {{ description }}

    This is a long-lived agent that processes events and maintains state.
    """

    @workflow.run
    async def run(self, initial_state: {{ agent_name }}State) -> None:
        """
        Run {{ agent_name }} agent event loop.

        Args:
            initial_state: Initial agent state
        """
        state = initial_state
        log.info("{{ agent_name }} started", extra={"initial_state": state})

        while True:
            # Wait for next event
            event = await workflow.wait_condition(
                lambda: workflow.all_handlers_finished(),
                timeout=timedelta(seconds=settings.agent_event_timeout),
            )

            if event is None:
                log.info("{{ agent_name }} timeout - no events received")
                continue

            # TODO: Process events and update state
            # Use workflow.execute_activity() to call functions
            # Update state based on event handling results

    @workflow.signal
    async def handle_event(self, event: {{ event_enum_name }}, payload: dict | None = None) -> None:
        """
        Handle incoming events.

        Args:
            event: Event type
            payload: Optional event payload
        """
        log.info(
            "{{ agent_name }} received event",
            extra={"event": event, "payload": payload},
        )

        # TODO: Implement event handling logic
        # Match on event type and dispatch to appropriate handler
        {% if events -%}
        match event:
        {%- for event in events %}
            case {{ event_enum_name }}.{{ event.constant }}:
                await self._handle_{{ event.handler_name }}(payload)
        {%- endfor %}
            case _:
                log.warning("Unknown event type", extra={"event": event})
        {%- endif %}

    @workflow.query
    def get_state(self) -> {{ agent_name }}State:
        """Query current agent state."""
        # TODO: Return current state
        raise NotImplementedError("State query not yet implemented")
{% for event in events %}

    async def _handle_{{ event.handler_name }}(self, payload: dict | None) -> None:
        """Handle {{ event.value }} event."""
        # TODO: Implement {{ event.value }} handler
        pass
{%- endfor %}
