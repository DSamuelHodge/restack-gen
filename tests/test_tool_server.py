"""Tests for FastMCP tool server generation."""

import pytest

from restack_gen.generator import GenerationError, generate_tool_server
from restack_gen.project import create_new_project


class TestToolServerGeneration:
    """Test FastMCP tool server generation."""

    @pytest.fixture
    def temp_project(self, tmp_path, monkeypatch) -> None:
        """Create a test project."""
        project_path = tmp_path / "testapp"
        create_new_project("testapp", parent_dir=tmp_path, force=False)
        monkeypatch.chdir(project_path)
        return project_path

    def test_generate_tool_server_creates_files(self, temp_project) -> None:
        """Test that tool server generation creates expected files."""
        files = generate_tool_server("Research", force=True)

        assert files["server"].exists()
        assert files["server"].name == "research_mcp.py"

        # Check config file
        if files.get("config"):
            assert files["config"].exists()
            assert files["config"].name == "tools.yaml"

    def test_generate_tool_server_content(self, temp_project) -> None:
        """Test that generated tool server has correct content."""
        files = generate_tool_server("Research", force=True)
        server_file = files["server"]

        content = server_file.read_text()

        # Check for required elements
        assert "# @generated by restack-gen" in content
        assert "from fastmcp import FastMCP" in content
        assert "class ResearchToolServer:" in content
        assert 'mcp = FastMCP("research_tools")' in content

        # Check for sample tools
        assert "@mcp.tool()" in content
        assert "async def web_search" in content
        assert "async def extract_urls" in content
        assert "async def calculate" in content

    def test_generate_tool_server_snake_case_input(self, temp_project) -> None:
        """Test tool server generation with snake_case input."""
        files = generate_tool_server("data_processor", force=True)

        assert files["server"].name == "data_processor_mcp.py"
        content = files["server"].read_text()
        assert "class DataProcessorToolServer:" in content
        assert 'mcp = FastMCP("data_processor_tools")' in content

    def test_generate_tool_server_pascal_case_input(self, temp_project) -> None:
        """Test tool server generation with PascalCase input."""
        files = generate_tool_server("DataProcessor", force=True)

        assert files["server"].name == "data_processor_mcp.py"
        content = files["server"].read_text()
        assert "class DataProcessorToolServer:" in content
        assert 'mcp = FastMCP("data_processor_tools")' in content

    def test_generate_tool_server_config_content(self, temp_project) -> None:
        """Test that generated config has correct structure."""
        files = generate_tool_server("Research", force=True)

        if not files.get("config"):
            pytest.skip("Config file already exists")

        config_file = files["config"]
        content = config_file.read_text()

        # Check YAML structure
        assert "fastmcp:" in content
        assert "servers:" in content
        assert 'name: "research_tools"' in content
        assert 'module: "src.testapp.tools.research_mcp"' in content
        assert 'class: "ResearchToolServer"' in content
        assert 'transport: "stdio"' in content
        assert "autostart: true" in content
        assert "health_check:" in content

    def test_generate_tool_server_without_project_fails(self, tmp_path, monkeypatch) -> None:
        """Test that generation fails outside of a project."""
        monkeypatch.chdir(tmp_path)

        with pytest.raises(GenerationError, match="Not in a restack-gen project"):
            generate_tool_server("Research")

    def test_generate_tool_server_invalid_name(self, temp_project) -> None:
        """Test that invalid names are rejected."""
        with pytest.raises(GenerationError, match="Invalid tool server name"):
            generate_tool_server("123-invalid")

        with pytest.raises(GenerationError, match="Invalid tool server name"):
            generate_tool_server("has space")

    def test_generate_tool_server_respects_force_flag(self, temp_project) -> None:
        """Test that force flag controls file overwriting."""
        # First generation
        generate_tool_server("Research", force=True)

        # Second generation without force should fail
        with pytest.raises(GenerationError, match="already exists"):
            generate_tool_server("Research", force=False)

        # Second generation with force should succeed
        files2 = generate_tool_server("Research", force=True)
        new_content = files2["server"].read_text()

        # Content should be regenerated (timestamps will differ)
        assert "# @generated by restack-gen" in new_content

    def test_generated_tool_server_is_valid_python(self, temp_project) -> None:
        """Test that generated tool server is valid Python code."""
        files = generate_tool_server("Research", force=True)
        server_file = files["server"]

        # Try to compile the generated code
        content = server_file.read_text()
        compile(content, str(server_file), "exec")

    def test_tool_server_has_health_check(self, temp_project) -> None:
        """Test that generated tool server includes health check method."""
        files = generate_tool_server("Research", force=True)
        content = files["server"].read_text()

        assert "async def health_check" in content
        assert "return len(tools) > 0" in content

    def test_tool_server_has_run_method(self, temp_project) -> None:
        """Test that generated tool server includes run method."""
        files = generate_tool_server("Research", force=True)
        content = files["server"].read_text()

        assert "async def run" in content
        assert 'transport: str = "stdio"' in content
        assert "await self.mcp.run(transport=transport)" in content

    def test_tool_server_has_main_block(self, temp_project) -> None:
        """Test that generated tool server can be run directly."""
        files = generate_tool_server("Research", force=True)
        content = files["server"].read_text()

        assert 'if __name__ == "__main__":' in content
        assert "import asyncio" in content
        assert "asyncio.run(server.run())" in content

    def test_tool_server_tools_init_created(self, temp_project) -> None:
        """Test that __init__.py is created in tools directory."""
        files = generate_tool_server("Research", force=True)

        tools_dir = files["server"].parent
        init_file = tools_dir / "__init__.py"

        assert init_file.exists()
        content = init_file.read_text()
        assert "FastMCP tool servers" in content

    def test_multiple_tool_servers(self, temp_project) -> None:
        """Test generating multiple tool servers in same project."""
        files1 = generate_tool_server("Research", force=True)
        files2 = generate_tool_server("Analytics", force=True)

        assert files1["server"] != files2["server"]
        assert files1["server"].name == "research_mcp.py"
        assert files2["server"].name == "analytics_mcp.py"

        # Both should exist
        assert files1["server"].exists()
        assert files2["server"].exists()
