"""Tests for scaffold generation command."""

import re
from pathlib import Path

import pytest

from restack_gen.generator import GenerationError, generate_scaffold
from restack_gen.project import create_new_project


@pytest.fixture()
def test_project(tmp_path: Path, monkeypatch: pytest.MonkeyPatch) -> Path:
    project_path = tmp_path / "testapp"
    create_new_project("testapp", parent_dir=tmp_path, force=False)
    monkeypatch.chdir(project_path)
    return project_path


def test_generate_scaffold_creates_all_files(test_project: Path) -> None:
    files = generate_scaffold("Widget")

    assert files["model"].exists()
    assert files["agent"].exists()
    assert files["test"].exists()
    assert files["client"].exists()

    # Verify content basics
    agent_content = files["agent"].read_text(encoding="utf-8")
    assert "class WidgetAgent(Agent):" in agent_content
    assert "@generated by restack-gen" in agent_content
    assert "WidgetData" in agent_content

    model_content = files["model"].read_text(encoding="utf-8")
    assert "class WidgetData(BaseModel):" in model_content


def test_generate_scaffold_invalid_name(test_project: Path) -> None:
    with pytest.raises(GenerationError):
        generate_scaffold("bad name")


def test_generate_scaffold_force_overwrite(test_project: Path) -> None:
    files1 = generate_scaffold("Gadget")

    # Verify file has @generated marker for force-overwrite to work
    content1 = files1["agent"].read_text(encoding="utf-8")
    assert "@generated by restack-gen" in content1

    # Overwrite with force
    files2 = generate_scaffold("Gadget", force=True)

    assert files1["agent"] == files2["agent"]
    assert files2["agent"].exists()


def test_models_file_appends_multiple_models(test_project: Path) -> None:
    files1 = generate_scaffold("First")
    files2 = generate_scaffold("Second")

    models_file = files1["model"]
    content = models_file.read_text(encoding="utf-8")

    # Both model classes should be present
    assert re.search(r"class\s+FirstData\(BaseModel\):", content)
    assert re.search(r"class\s+SecondData\(BaseModel\):", content)
