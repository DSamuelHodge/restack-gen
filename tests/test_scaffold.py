"""Tests for the scaffold generator."""

from pathlib import Path

import pytest

from restack_gen.generator import (
    GenerationError,
    generate_scaffold,
)
from restack_gen.project import create_new_project


@pytest.fixture
def test_project(tmp_path: Path) -> Path:
    """Create a fresh test project and chdir into it."""
    project_path = tmp_path / "testproject"
    create_new_project("testproject", parent_dir=tmp_path, force=False)
    return project_path


def test_generate_scaffold_creates_files_with_defaults(
    test_project: Path, monkeypatch: pytest.MonkeyPatch
) -> None:
    """Scaffold should create model, agent, test, and client with LLM/tools defaults."""
    monkeypatch.chdir(test_project)

    files = generate_scaffold("Starter")

    assert files["model"].exists()
    assert files["agent"].exists()
    assert files["test"].exists()
    assert files["client"].exists()

    # Model contains the generated marker or class definition
    model_text = files["model"].read_text()
    assert "class StarterData(" in model_text

    # Agent should include LLM and tool integration by default
    agent_text = files["agent"].read_text()
    assert "class StarterAgent" in agent_text
    assert "@generated by restack-gen" in agent_text
    # LLM imports/usage
    assert "common.llm_router import LLMRouter, LLMRequest" in agent_text
    assert "common.prompt_loader import PromptLoader" in agent_text
    # Tools imports/usage (default Research)
    assert "common.fastmcp_manager import FastMCPClient" in agent_text
    assert 'FastMCPClient("Research")' in agent_text


def test_generate_scaffold_invalid_name(
    test_project: Path, monkeypatch: pytest.MonkeyPatch
) -> None:
    """Invalid names should raise GenerationError."""
    monkeypatch.chdir(test_project)

    with pytest.raises(GenerationError):
        generate_scaffold("")


def test_generate_scaffold_force_overwrite(
    test_project: Path, monkeypatch: pytest.MonkeyPatch
) -> None:
    """--force should allow overwriting previously generated files."""
    monkeypatch.chdir(test_project)

    first = generate_scaffold("Example")
    second = generate_scaffold("Example", force=True)

    assert first["agent"] == second["agent"]
    assert first["test"] == second["test"]
    assert first["client"] == second["client"]


def test_generate_scaffold_appends_models(
    test_project: Path, monkeypatch: pytest.MonkeyPatch
) -> None:
    """Scaffold should append additional models to common/models.py."""
    monkeypatch.chdir(test_project)

    files1 = generate_scaffold("One")
    files2 = generate_scaffold("Two", force=True)

    assert files1["model"] == files2["model"]
    text = files1["model"].read_text()
    assert "class OneData(" in text
    assert "class TwoData(" in text
